import { betterAuth } from 'better-auth';
import { drizzleAdapter } from 'better-auth/adapters/drizzle';
import { nextCookies } from 'better-auth/next-js';
import { db } from '../db';
import { oneTap, magicLink } from 'better-auth/plugins';
import nodemailer from 'nodemailer';
import fs from 'fs';
import path from 'path';
import { headers } from 'next/headers';

// Get IP address from Vercel headers with fallback
async function getIP() {
  const headersList = await headers();
  const forwardedFor = headersList.get('x-forwarded-for');
  const realIP = headersList.get('x-real-ip');
  const vercelForwardedFor = headersList.get('x-vercel-forwarded-for');

  if (forwardedFor) {
    return forwardedFor.split(',')[0]?.trim() || 'unknown ip';
  }

  if (realIP) {
    return realIP;
  }

  if (vercelForwardedFor) {
    return vercelForwardedFor.split(',')[0]?.trim() || 'unknown ip';
  }

  return 'unknown ip';
}

// Get location from Vercel headers with fallback
async function getLocation() {
  const headersList = await headers();
  const city = headersList.get('x-vercel-ip-city');
  const country = headersList.get('x-vercel-ip-country');
  const region = headersList.get('x-vercel-ip-country-region');

  if (city && country) {
    return { city, country: country, region: region || '' };
  }

  return { city: 'unknown', country: 'unknown', region: '' };
}

// Email sending function
async function sendMagicLinkEmail({ email, url }: { email: string; token: string; url: string }) {
  const emailServer = process.env.EMAIL_SERVER;
  if (!emailServer) {
    throw new Error('EMAIL_SERVER environment variable is not set');
  }

  const emailUrl = new URL(emailServer);

  const transporter = nodemailer.createTransport({
    host: emailUrl.hostname,
    port: parseInt(emailUrl.port),
    secure: emailUrl.port === '465',
    auth: {
      user: decodeURIComponent(emailUrl.username),
      pass: decodeURIComponent(emailUrl.password),
    },
  });

  const templatePath = path.join(process.cwd(), 'src', 'lib', 'templates', 'email.html');
  let emailTemplate = fs.readFileSync(templatePath, 'utf-8');

  // Get IP and location data
  const ip = await getIP();
  const { city, country } = await getLocation();

  // Replace template variables
  emailTemplate = emailTemplate.replace(/\{\{EMAIL\}\}/g, email);
  emailTemplate = emailTemplate.replace(/\{\{URL\}\}/g, url);
  emailTemplate = emailTemplate.replace(/\{\{IP\}\}/g, ip);

  const locationInfo = city !== 'unknown' && country !== 'unknown' ? ` <!-- -->located in<!-- --> <span style="color:rgb(0,0,0)">${city}, ${country}</span>` : '';
  emailTemplate = emailTemplate.replace(/\{\{LOCATION_INFO\}\}/g, locationInfo);

  const textFallback = `Your login link for Authenticator

You've requested to log in to Authenticator with the following email address (${email})

Login to Authenticator: ${url}

This link will only be valid for the next 15 minutes.

This code was sent from ${ip}${city !== 'unknown' && country !== 'unknown' ? ` located in ${city}, ${country}` : ''}. If you were not expecting this email, you can ignore this email.

aruu.meÂ® 2025`;

  await transporter.sendMail({
    from: process.env.EMAIL_FROM || 'no-reply.authenticator@tunn.cc',
    to: email,
    subject: 'Your login link to Authenticator',
    html: emailTemplate,
    text: textFallback,
    attachments: [
      {
        cid: 'authenticator.logo',
        filename: 'authenticator-logo.png',
        encoding: 'base64',
        contentType: 'image/png',
        contentDisposition: 'inline',
        content: ``,
      },
    ],
  });
}

export const auth = betterAuth({
  database: drizzleAdapter(db, {
    provider: 'pg',
  }),
  emailAndPassword: {
    enabled: false,
  },
  socialProviders: {
    google: {
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    },
  },

  trustedOrigins: ['localhost:3000', 'authenticator.tunn.cc'],

  plugins: [
    nextCookies(),
    oneTap(),
    magicLink({
      sendMagicLink: sendMagicLinkEmail,
      expiresIn: 300,
    }),
  ],
});
